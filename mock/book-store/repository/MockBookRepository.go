// Code generated by mockery. DO NOT EDIT.

package repository

import (
	model "book-store/model"

	mock "github.com/stretchr/testify/mock"
)

// MockBookRepository is an autogenerated mock type for the BookRepository type
type MockBookRepository struct {
	mock.Mock
}

type MockBookRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookRepository) EXPECT() *MockBookRepository_Expecter {
	return &MockBookRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: book
func (_m *MockBookRepository) Create(book *model.Book) (*model.Book, error) {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Book) (*model.Book, error)); ok {
		return rf(book)
	}
	if rf, ok := ret.Get(0).(func(*model.Book) *model.Book); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBookRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - book *model.Book
func (_e *MockBookRepository_Expecter) Create(book interface{}) *MockBookRepository_Create_Call {
	return &MockBookRepository_Create_Call{Call: _e.mock.On("Create", book)}
}

func (_c *MockBookRepository_Create_Call) Run(run func(book *model.Book)) *MockBookRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Book))
	})
	return _c
}

func (_c *MockBookRepository_Create_Call) Return(_a0 *model.Book, _a1 error) *MockBookRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookRepository_Create_Call) RunAndReturn(run func(*model.Book) (*model.Book, error)) *MockBookRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockBookRepository) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBookRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *MockBookRepository_Expecter) Delete(id interface{}) *MockBookRepository_Delete_Call {
	return &MockBookRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockBookRepository_Delete_Call) Run(run func(id int)) *MockBookRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockBookRepository_Delete_Call) Return(_a0 error) *MockBookRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookRepository_Delete_Call) RunAndReturn(run func(int) error) *MockBookRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields:
func (_m *MockBookRepository) FindAll() ([]model.Book, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockBookRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockBookRepository_Expecter) FindAll() *MockBookRepository_FindAll_Call {
	return &MockBookRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockBookRepository_FindAll_Call) Run(run func()) *MockBookRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBookRepository_FindAll_Call) Return(_a0 []model.Book, _a1 error) *MockBookRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookRepository_FindAll_Call) RunAndReturn(run func() ([]model.Book, error)) *MockBookRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockBookRepository) FindById(id int) (*model.Book, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Book, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Book); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockBookRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id int
func (_e *MockBookRepository_Expecter) FindById(id interface{}) *MockBookRepository_FindById_Call {
	return &MockBookRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockBookRepository_FindById_Call) Run(run func(id int)) *MockBookRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockBookRepository_FindById_Call) Return(_a0 *model.Book, _a1 error) *MockBookRepository_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookRepository_FindById_Call) RunAndReturn(run func(int) (*model.Book, error)) *MockBookRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// FindByName provides a mock function with given fields: name
func (_m *MockBookRepository) FindByName(name string) (*model.Book, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Book, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Book); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookRepository_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type MockBookRepository_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//   - name string
func (_e *MockBookRepository_Expecter) FindByName(name interface{}) *MockBookRepository_FindByName_Call {
	return &MockBookRepository_FindByName_Call{Call: _e.mock.On("FindByName", name)}
}

func (_c *MockBookRepository_FindByName_Call) Run(run func(name string)) *MockBookRepository_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBookRepository_FindByName_Call) Return(_a0 *model.Book, _a1 error) *MockBookRepository_FindByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookRepository_FindByName_Call) RunAndReturn(run func(string) (*model.Book, error)) *MockBookRepository_FindByName_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: book
func (_m *MockBookRepository) Update(book *model.Book) error {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBookRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - book *model.Book
func (_e *MockBookRepository_Expecter) Update(book interface{}) *MockBookRepository_Update_Call {
	return &MockBookRepository_Update_Call{Call: _e.mock.On("Update", book)}
}

func (_c *MockBookRepository_Update_Call) Run(run func(book *model.Book)) *MockBookRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Book))
	})
	return _c
}

func (_c *MockBookRepository_Update_Call) Return(_a0 error) *MockBookRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookRepository_Update_Call) RunAndReturn(run func(*model.Book) error) *MockBookRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookRepository creates a new instance of MockBookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookRepository {
	mock := &MockBookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
