// Code generated by mockery. DO NOT EDIT.

package repository

import (
	model "book-store/model"

	mock "github.com/stretchr/testify/mock"
)

// MockBillDetailRepository is an autogenerated mock type for the BillDetailRepository type
type MockBillDetailRepository struct {
	mock.Mock
}

type MockBillDetailRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBillDetailRepository) EXPECT() *MockBillDetailRepository_Expecter {
	return &MockBillDetailRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: billDetail
func (_m *MockBillDetailRepository) Create(billDetail *model.BillDetail) (*model.BillDetail, error) {
	ret := _m.Called(billDetail)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.BillDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.BillDetail) (*model.BillDetail, error)); ok {
		return rf(billDetail)
	}
	if rf, ok := ret.Get(0).(func(*model.BillDetail) *model.BillDetail); ok {
		r0 = rf(billDetail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BillDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.BillDetail) error); ok {
		r1 = rf(billDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillDetailRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBillDetailRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - billDetail *model.BillDetail
func (_e *MockBillDetailRepository_Expecter) Create(billDetail interface{}) *MockBillDetailRepository_Create_Call {
	return &MockBillDetailRepository_Create_Call{Call: _e.mock.On("Create", billDetail)}
}

func (_c *MockBillDetailRepository_Create_Call) Run(run func(billDetail *model.BillDetail)) *MockBillDetailRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.BillDetail))
	})
	return _c
}

func (_c *MockBillDetailRepository_Create_Call) Return(_a0 *model.BillDetail, _a1 error) *MockBillDetailRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillDetailRepository_Create_Call) RunAndReturn(run func(*model.BillDetail) (*model.BillDetail, error)) *MockBillDetailRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByBillId provides a mock function with given fields: billId
func (_m *MockBillDetailRepository) FindByBillId(billId int) []model.BillDetail {
	ret := _m.Called(billId)

	if len(ret) == 0 {
		panic("no return value specified for FindByBillId")
	}

	var r0 []model.BillDetail
	if rf, ok := ret.Get(0).(func(int) []model.BillDetail); ok {
		r0 = rf(billId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BillDetail)
		}
	}

	return r0
}

// MockBillDetailRepository_FindByBillId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByBillId'
type MockBillDetailRepository_FindByBillId_Call struct {
	*mock.Call
}

// FindByBillId is a helper method to define mock.On call
//   - billId int
func (_e *MockBillDetailRepository_Expecter) FindByBillId(billId interface{}) *MockBillDetailRepository_FindByBillId_Call {
	return &MockBillDetailRepository_FindByBillId_Call{Call: _e.mock.On("FindByBillId", billId)}
}

func (_c *MockBillDetailRepository_FindByBillId_Call) Run(run func(billId int)) *MockBillDetailRepository_FindByBillId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockBillDetailRepository_FindByBillId_Call) Return(_a0 []model.BillDetail) *MockBillDetailRepository_FindByBillId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBillDetailRepository_FindByBillId_Call) RunAndReturn(run func(int) []model.BillDetail) *MockBillDetailRepository_FindByBillId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBillDetailRepository creates a new instance of MockBillDetailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBillDetailRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBillDetailRepository {
	mock := &MockBillDetailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
