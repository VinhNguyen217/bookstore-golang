// Code generated by mockery. DO NOT EDIT.

package repository

import (
	model "book-store/model"

	mock "github.com/stretchr/testify/mock"
)

// MockCartRepository is an autogenerated mock type for the CartRepository type
type MockCartRepository struct {
	mock.Mock
}

type MockCartRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCartRepository) EXPECT() *MockCartRepository_Expecter {
	return &MockCartRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: cart
func (_m *MockCartRepository) Create(cart *model.Cart) (*model.Cart, error) {
	ret := _m.Called(cart)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Cart) (*model.Cart, error)); ok {
		return rf(cart)
	}
	if rf, ok := ret.Get(0).(func(*model.Cart) *model.Cart); ok {
		r0 = rf(cart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Cart) error); ok {
		r1 = rf(cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCartRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCartRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - cart *model.Cart
func (_e *MockCartRepository_Expecter) Create(cart interface{}) *MockCartRepository_Create_Call {
	return &MockCartRepository_Create_Call{Call: _e.mock.On("Create", cart)}
}

func (_c *MockCartRepository_Create_Call) Run(run func(cart *model.Cart)) *MockCartRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Cart))
	})
	return _c
}

func (_c *MockCartRepository_Create_Call) Return(_a0 *model.Cart, _a1 error) *MockCartRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCartRepository_Create_Call) RunAndReturn(run func(*model.Cart) (*model.Cart, error)) *MockCartRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: id
func (_m *MockCartRepository) DeleteById(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartRepository_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockCartRepository_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - id int
func (_e *MockCartRepository_Expecter) DeleteById(id interface{}) *MockCartRepository_DeleteById_Call {
	return &MockCartRepository_DeleteById_Call{Call: _e.mock.On("DeleteById", id)}
}

func (_c *MockCartRepository_DeleteById_Call) Run(run func(id int)) *MockCartRepository_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockCartRepository_DeleteById_Call) Return(_a0 error) *MockCartRepository_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartRepository_DeleteById_Call) RunAndReturn(run func(int) error) *MockCartRepository_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockCartRepository) FindById(id int) (*model.Cart, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *model.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Cart, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Cart); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCartRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockCartRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id int
func (_e *MockCartRepository_Expecter) FindById(id interface{}) *MockCartRepository_FindById_Call {
	return &MockCartRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockCartRepository_FindById_Call) Run(run func(id int)) *MockCartRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockCartRepository_FindById_Call) Return(_a0 *model.Cart, _a1 error) *MockCartRepository_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCartRepository_FindById_Call) RunAndReturn(run func(int) (*model.Cart, error)) *MockCartRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserId provides a mock function with given fields: userId
func (_m *MockCartRepository) FindByUserId(userId int) []model.Cart {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserId")
	}

	var r0 []model.Cart
	if rf, ok := ret.Get(0).(func(int) []model.Cart); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Cart)
		}
	}

	return r0
}

// MockCartRepository_FindByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserId'
type MockCartRepository_FindByUserId_Call struct {
	*mock.Call
}

// FindByUserId is a helper method to define mock.On call
//   - userId int
func (_e *MockCartRepository_Expecter) FindByUserId(userId interface{}) *MockCartRepository_FindByUserId_Call {
	return &MockCartRepository_FindByUserId_Call{Call: _e.mock.On("FindByUserId", userId)}
}

func (_c *MockCartRepository_FindByUserId_Call) Run(run func(userId int)) *MockCartRepository_FindByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockCartRepository_FindByUserId_Call) Return(_a0 []model.Cart) *MockCartRepository_FindByUserId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartRepository_FindByUserId_Call) RunAndReturn(run func(int) []model.Cart) *MockCartRepository_FindByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserIdAndBookId provides a mock function with given fields: userId, bookId
func (_m *MockCartRepository) FindByUserIdAndBookId(userId int, bookId int) *model.Cart {
	ret := _m.Called(userId, bookId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserIdAndBookId")
	}

	var r0 *model.Cart
	if rf, ok := ret.Get(0).(func(int, int) *model.Cart); ok {
		r0 = rf(userId, bookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cart)
		}
	}

	return r0
}

// MockCartRepository_FindByUserIdAndBookId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserIdAndBookId'
type MockCartRepository_FindByUserIdAndBookId_Call struct {
	*mock.Call
}

// FindByUserIdAndBookId is a helper method to define mock.On call
//   - userId int
//   - bookId int
func (_e *MockCartRepository_Expecter) FindByUserIdAndBookId(userId interface{}, bookId interface{}) *MockCartRepository_FindByUserIdAndBookId_Call {
	return &MockCartRepository_FindByUserIdAndBookId_Call{Call: _e.mock.On("FindByUserIdAndBookId", userId, bookId)}
}

func (_c *MockCartRepository_FindByUserIdAndBookId_Call) Run(run func(userId int, bookId int)) *MockCartRepository_FindByUserIdAndBookId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockCartRepository_FindByUserIdAndBookId_Call) Return(_a0 *model.Cart) *MockCartRepository_FindByUserIdAndBookId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartRepository_FindByUserIdAndBookId_Call) RunAndReturn(run func(int, int) *model.Cart) *MockCartRepository_FindByUserIdAndBookId_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserIdAndCartId provides a mock function with given fields: userId, cartId
func (_m *MockCartRepository) FindByUserIdAndCartId(userId int, cartId int) *model.Cart {
	ret := _m.Called(userId, cartId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserIdAndCartId")
	}

	var r0 *model.Cart
	if rf, ok := ret.Get(0).(func(int, int) *model.Cart); ok {
		r0 = rf(userId, cartId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cart)
		}
	}

	return r0
}

// MockCartRepository_FindByUserIdAndCartId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserIdAndCartId'
type MockCartRepository_FindByUserIdAndCartId_Call struct {
	*mock.Call
}

// FindByUserIdAndCartId is a helper method to define mock.On call
//   - userId int
//   - cartId int
func (_e *MockCartRepository_Expecter) FindByUserIdAndCartId(userId interface{}, cartId interface{}) *MockCartRepository_FindByUserIdAndCartId_Call {
	return &MockCartRepository_FindByUserIdAndCartId_Call{Call: _e.mock.On("FindByUserIdAndCartId", userId, cartId)}
}

func (_c *MockCartRepository_FindByUserIdAndCartId_Call) Run(run func(userId int, cartId int)) *MockCartRepository_FindByUserIdAndCartId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockCartRepository_FindByUserIdAndCartId_Call) Return(_a0 *model.Cart) *MockCartRepository_FindByUserIdAndCartId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartRepository_FindByUserIdAndCartId_Call) RunAndReturn(run func(int, int) *model.Cart) *MockCartRepository_FindByUserIdAndCartId_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: cart
func (_m *MockCartRepository) Update(cart *model.Cart) error {
	ret := _m.Called(cart)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Cart) error); ok {
		r0 = rf(cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCartRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCartRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - cart *model.Cart
func (_e *MockCartRepository_Expecter) Update(cart interface{}) *MockCartRepository_Update_Call {
	return &MockCartRepository_Update_Call{Call: _e.mock.On("Update", cart)}
}

func (_c *MockCartRepository_Update_Call) Run(run func(cart *model.Cart)) *MockCartRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Cart))
	})
	return _c
}

func (_c *MockCartRepository_Update_Call) Return(_a0 error) *MockCartRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCartRepository_Update_Call) RunAndReturn(run func(*model.Cart) error) *MockCartRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCartRepository creates a new instance of MockCartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCartRepository {
	mock := &MockCartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
