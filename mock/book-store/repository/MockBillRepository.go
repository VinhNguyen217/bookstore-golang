// Code generated by mockery. DO NOT EDIT.

package repository

import (
	model "book-store/model"

	mock "github.com/stretchr/testify/mock"
)

// MockBillRepository is an autogenerated mock type for the BillRepository type
type MockBillRepository struct {
	mock.Mock
}

type MockBillRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBillRepository) EXPECT() *MockBillRepository_Expecter {
	return &MockBillRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: bill
func (_m *MockBillRepository) Create(bill *model.Bill) (*model.Bill, error) {
	ret := _m.Called(bill)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Bill
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Bill) (*model.Bill, error)); ok {
		return rf(bill)
	}
	if rf, ok := ret.Get(0).(func(*model.Bill) *model.Bill); ok {
		r0 = rf(bill)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Bill)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Bill) error); ok {
		r1 = rf(bill)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBillRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - bill *model.Bill
func (_e *MockBillRepository_Expecter) Create(bill interface{}) *MockBillRepository_Create_Call {
	return &MockBillRepository_Create_Call{Call: _e.mock.On("Create", bill)}
}

func (_c *MockBillRepository_Create_Call) Run(run func(bill *model.Bill)) *MockBillRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Bill))
	})
	return _c
}

func (_c *MockBillRepository_Create_Call) Return(_a0 *model.Bill, _a1 error) *MockBillRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillRepository_Create_Call) RunAndReturn(run func(*model.Bill) (*model.Bill, error)) *MockBillRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields:
func (_m *MockBillRepository) FindAll() []model.Bill {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []model.Bill
	if rf, ok := ret.Get(0).(func() []model.Bill); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Bill)
		}
	}

	return r0
}

// MockBillRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockBillRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockBillRepository_Expecter) FindAll() *MockBillRepository_FindAll_Call {
	return &MockBillRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockBillRepository_FindAll_Call) Run(run func()) *MockBillRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBillRepository_FindAll_Call) Return(_a0 []model.Bill) *MockBillRepository_FindAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBillRepository_FindAll_Call) RunAndReturn(run func() []model.Bill) *MockBillRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockBillRepository) FindById(id int) (*model.Bill, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *model.Bill
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Bill, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Bill); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Bill)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockBillRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id int
func (_e *MockBillRepository_Expecter) FindById(id interface{}) *MockBillRepository_FindById_Call {
	return &MockBillRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockBillRepository_FindById_Call) Run(run func(id int)) *MockBillRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockBillRepository_FindById_Call) Return(_a0 *model.Bill, _a1 error) *MockBillRepository_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillRepository_FindById_Call) RunAndReturn(run func(int) (*model.Bill, error)) *MockBillRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIdAndUserId provides a mock function with given fields: id, userId
func (_m *MockBillRepository) FindByIdAndUserId(id int, userId int) (*model.Bill, error) {
	ret := _m.Called(id, userId)

	if len(ret) == 0 {
		panic("no return value specified for FindByIdAndUserId")
	}

	var r0 *model.Bill
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*model.Bill, error)); ok {
		return rf(id, userId)
	}
	if rf, ok := ret.Get(0).(func(int, int) *model.Bill); ok {
		r0 = rf(id, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Bill)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillRepository_FindByIdAndUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIdAndUserId'
type MockBillRepository_FindByIdAndUserId_Call struct {
	*mock.Call
}

// FindByIdAndUserId is a helper method to define mock.On call
//   - id int
//   - userId int
func (_e *MockBillRepository_Expecter) FindByIdAndUserId(id interface{}, userId interface{}) *MockBillRepository_FindByIdAndUserId_Call {
	return &MockBillRepository_FindByIdAndUserId_Call{Call: _e.mock.On("FindByIdAndUserId", id, userId)}
}

func (_c *MockBillRepository_FindByIdAndUserId_Call) Run(run func(id int, userId int)) *MockBillRepository_FindByIdAndUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockBillRepository_FindByIdAndUserId_Call) Return(_a0 *model.Bill, _a1 error) *MockBillRepository_FindByIdAndUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillRepository_FindByIdAndUserId_Call) RunAndReturn(run func(int, int) (*model.Bill, error)) *MockBillRepository_FindByIdAndUserId_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserId provides a mock function with given fields: userId
func (_m *MockBillRepository) FindByUserId(userId int) []model.Bill {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserId")
	}

	var r0 []model.Bill
	if rf, ok := ret.Get(0).(func(int) []model.Bill); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Bill)
		}
	}

	return r0
}

// MockBillRepository_FindByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserId'
type MockBillRepository_FindByUserId_Call struct {
	*mock.Call
}

// FindByUserId is a helper method to define mock.On call
//   - userId int
func (_e *MockBillRepository_Expecter) FindByUserId(userId interface{}) *MockBillRepository_FindByUserId_Call {
	return &MockBillRepository_FindByUserId_Call{Call: _e.mock.On("FindByUserId", userId)}
}

func (_c *MockBillRepository_FindByUserId_Call) Run(run func(userId int)) *MockBillRepository_FindByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockBillRepository_FindByUserId_Call) Return(_a0 []model.Bill) *MockBillRepository_FindByUserId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBillRepository_FindByUserId_Call) RunAndReturn(run func(int) []model.Bill) *MockBillRepository_FindByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: bill
func (_m *MockBillRepository) Update(bill *model.Bill) error {
	ret := _m.Called(bill)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Bill) error); ok {
		r0 = rf(bill)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBillRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBillRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - bill *model.Bill
func (_e *MockBillRepository_Expecter) Update(bill interface{}) *MockBillRepository_Update_Call {
	return &MockBillRepository_Update_Call{Call: _e.mock.On("Update", bill)}
}

func (_c *MockBillRepository_Update_Call) Run(run func(bill *model.Bill)) *MockBillRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Bill))
	})
	return _c
}

func (_c *MockBillRepository_Update_Call) Return(_a0 error) *MockBillRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBillRepository_Update_Call) RunAndReturn(run func(*model.Bill) error) *MockBillRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBillRepository creates a new instance of MockBillRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBillRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBillRepository {
	mock := &MockBillRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
